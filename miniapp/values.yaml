# Default values for miniapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 3

host: "arch.homework"

rollingUpdate:
  enabled: "true"

auth:
  existingSecret: ""

ingress-nginx:
  controller:
    kind: DaemonSet
    reportNodeInternalIp: true

    hostPort:
      enabled: true
      ports:
        http: 80
        https: 443

    service:
      type: NodePort

    metrics:
      enabled: true
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/path: "/metrics"

postgresql:    
  image:
    repository: bitnamilegacy/postgresql
    debug: true
  architecture: replication
  primary:
    persistence:
      enabled: true
  readReplicas:
    replicaCount: 2
    persistence:
      enabled: true

  auth:
    existingSecret: ""

  primary:
    initdb:
      scripts:
        init.sql: |
          CREATE DATABASE miniapp;
          \c miniapp;

          CREATE TABLE IF NOT EXISTS users (
              id SERIAL PRIMARY KEY,
              username VARCHAR(256) NOT NULL UNIQUE,
              firstname VARCHAR(256) NOT NULL,
              lastname VARCHAR(256) NOT NULL,
              email VARCHAR(256) NOT NULL UNIQUE,
              phone VARCHAR(256) NOT NULL,
              password VARCHAR(256) NOT NULL,
              roles VARCHAR(256) NOT NULL DEFAULT ''
          );

          CREATE TABLE IF NOT EXISTS accounts (
              id SERIAL PRIMARY KEY,
              user_id INTEGER NOT NULL CONSTRAINT fk_user REFERENCES users(id) ON DELETE CASCADE,
              balance NUMERIC(15, 2) DEFAULT 0.00,
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              mtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          DO $$
          DECLARE
              new_user_id INT;
          BEGIN
              INSERT INTO users(username, firstname, lastname, email, phone, password, roles)
              VALUES('admin', 'admin', 'admin', 'admin', 'admin', '$2a$14$jNlzJW/11dcIXyWMD215JeWTrNDsV5ztpF/dmHBL.I1QiB5QAwi8y', 'admin')
              RETURNING id INTO new_user_id;

              INSERT INTO accounts(user_id)
              VALUES (new_user_id);
          END
          $$;

          CREATE TYPE order_status AS ENUM (
              'pending',
              'approved',
              'canceled',
              'delivery',
              'delivered'
          );

          CREATE TABLE IF NOT EXISTS orders (
              id SERIAL PRIMARY KEY,
              user_id INTEGER NOT NULL,
              items TEXT,
              hour_mask BIGINT NOT NULL DEFAULT 0,
              start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              end_time TIMESTAMP DEFAULT NULL,
              error VARCHAR(256) DEFAULT '',
              status order_status DEFAULT 'pending',
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              mtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TYPE payment_status AS ENUM (
              'pending',
              'ok',
              'failed'
          );

          CREATE TYPE payment_action as ENUM (
              'deposit',
              'pay'
          );

          CREATE TABLE IF NOT EXISTS payments (
              id SERIAL PRIMARY KEY,
              order_id INTEGER NOT NULL,
              amount NUMERIC(15, 2) NOT NULL DEFAULT 0.00,
              action payment_action DEFAULT 'deposit',
              status payment_status DEFAULT 'pending',
              error VARCHAR(256) DEFAULT '',
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              mtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE IF NOT EXISTS notifications (
              id SERIAL PRIMARY KEY,
              user_id INTEGER NOT NULL,
              order_id INTEGER NOT NULL,
              message TEXT,
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE IF NOT EXISTS items (
              id SERIAL PRIMARY KEY,
              name VARCHAR(256) NOT NULL,
              description TEXT DEFAULT '',
              price NUMERIC(15, 2) NOT NULL DEFAULT 0.00,
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              mtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE IF NOT EXISTS stock (
              id SERIAL PRIMARY KEY,
              item_id INTEGER NOT NULL,
              quantity INTEGER NOT NULL DEFAULT 0,
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              mtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TYPE stock_action AS ENUM (
              'add',
              'remove'
          );

          CREATE TYPE stock_change_status AS ENUM (
              'pending',
              'ok',
              'failed'
          );

          CREATE TABLE IF NOT EXISTS stock_changes (
              id SERIAL PRIMARY KEY,
              order_id INTEGER NOT NULL,
              stock_id INTEGER NOT NULL,
              action stock_action DEFAULT 'add',
              status stock_change_status DEFAULT 'pending',
              quantity INTEGER NOT NULL DEFAULT 0,
              error VARCHAR(256) DEFAULT '',
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              mtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE IF NOT EXISTS couriers(
              id SERIAL PRIMARY KEY,
              name VARCHAR(256) NOT NULL DEFAULT ''
          );

          CREATE TABLE IF NOT EXISTS courier_schedule(
              id SERIAL PRIMARY KEY,
              courier_id INTEGER NOT NULL,
              work_date DATE DEFAULT CURRENT_DATE,
              hour_mask BIGINT NOT NULL DEFAULT 0,
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              mtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TYPE cour_reserve_status as ENUM(
              'pending',
              'ok',
              'failed'
          );

          CREATE TYPE cour_reserve_action as ENUM(
              'revert_reserve',
              'reserve'
          );

          CREATE TABLE IF NOT EXISTS courier_reservation(
              id SERIAL PRIMARY KEY,
              order_id INTEGER NOT NULL,
              courier_id INTEGER NOT NULL,
              action cour_reserve_action DEFAULT 'revert_reserve',
              status cour_reserve_status DEFAULT 'pending',
              work_date DATE DEFAULT CURRENT_DATE,
              hour_mask BIGINT NOT NULL DEFAULT 0,
              error VARCHAR(256) DEFAULT '',
              ctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              mtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
         

  metrics:
    enabled: true
    image:
      repository: bitnamilegacy/postgres-exporter
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      additionalScrapeConfigs:
        - job_name: metrics
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: "true"
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
              action: replace
              target_label: __address__
              regex: (.+):(?:\d+);(\d+)
              replacement: $1:$2

redis:
  image:
    repository: bitnamilegacy/redis
  architecture: replication
  metrics:
    enabled: true
    image:
      repository: bitnamilegacy/redis-exporter
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"

kafka:
  image:
    repository: bitnamilegacy/kafka
  listeners:
    client:
      protocol: PLAINTEXT
  provisioning:
    enabled: true
    topics:
      - name: payments
        partitions: 3
        replicas: 3
      - name: payments_status
        partitions: 3
        replicas: 3
      - name: notifications
        partitions: 3
        replicas: 3
      - name: stock_changes
        partitions: 3
        replicas: 3
      - name: stock_changes_status
        partitions: 3
        replicas: 3
      - name: notifications
        partitions: 3
        replicas: 3
      - name: cour_reserve
        partitions: 3
        replicas: 3
      - name: cour_reserve_status
        partitions: 3
        replicas: 3
  metrics:
    # === JMX Exporter (JVM, broker internals) ===
    jmx:
      enabled: true
      image:
        repository: bitnamilegacy/jmx-exporter
      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "5556"
          prometheus.io/path: "/metrics"
    prometheusRule:
      enabled: true
    serviceMonitor:
      enabled: true


# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
users:
  image:
    repository: maksonday
    name: users
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "test5"
  path: /api

auth:
  image:
    repository: maksonday
    name: auth-service
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "test5"
  path: /auth

billing:
  image:
    repository: maksonday
    name: billing
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "test29"
  path: /billing

stock:
  image:
    repository: maksonday
    name: stock
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "test33"
  path: /stock

notifications:
  image:
    repository: maksonday
    name: notifications
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "test10"
  path: /notifications

order:
  image:
    repository: maksonday
    name: order
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "test29"
  path: /order


delivery:
  image:
    repository: maksonday
    name: delivery
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "test28"
  path: /delivery
  courReserveMaxRetries: 5

elasticsearch:
  secret:
    password: "test"
  antiAffinity: "soft"

  # Shrink default JVM heap.
  esJavaOpts: "-Xms1g -Xmx1g"

  # Allocate smaller chunks of memory per pod.
  resources:
    requests:
      memory: 2Gi
      cpu: 1
    limits:
      memory: 4Gi
      cpu: 2

  # Request smaller persistent volumes.
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "standard"
    resources:
      requests:
        storage: 100M

filebeat:
  daemonset:
    enabled: true
    config:
      filebeat.yml: |
        filebeat.inputs:
        - type: log
          enabled: true
          paths:
            - /var/log/*.log
          json.keys_under_root: true
          json.add_error_key: true

        output.elasticsearch:
          hosts: ['elasticsearch-master:9200']
          username: elastic
          password: test

        setup.kibana:
          host: "miniapp-kibana:5601"


# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  targetPort: 8000
  metrics:
    port: 8542

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: ""
  pathType: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: true
  httpGet:
    path: /
    port: http
readinessProbe:
  enabled: true
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
