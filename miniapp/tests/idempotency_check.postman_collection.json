{
	"info": {
		"_postman_id": "b65fdfb7-08cc-4ac1-adb8-538777772256",
		"name": "idempotency_check",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25646654"
	},
	"item": [
		{
			"name": "check stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Stock changed after one successful order\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseBody).to.be.an(\"array\").with.lengthOf(3);\r",
							"\r",
							"    const expectedQuantities = {\r",
							"        1: 8,\r",
							"        2: 7,\r",
							"        3: 10\r",
							"    };\r",
							"\r",
							"    // Преобразуем массив ответа в объект по id\r",
							"    const responseMap = responseBody.reduce((acc, item) => {\r",
							"        acc[item.id] = item.quantity; // приводим id к строке\r",
							"        return acc;\r",
							"    }, {});\r",
							"\r",
							"    // Проверяем все ожидаемые значения\r",
							"    Object.entries(expectedQuantities).forEach(([id, expected]) => {\r",
							"        pm.test(`Item ID ${id} matches expected values`, function () {\r",
							"            pm.expect(responseMap).to.have.property(id);\r",
							"            const item = responseMap[id];\r",
							"            pm.expect(item.name).to.equal(expected.name);\r",
							"            pm.expect(item.price).to.equal(expected.price);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/stock/get_items",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"get_items"
					]
				}
			},
			"response": []
		},
		{
			"name": "check balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Balance reduced only for 1 successful order\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    pm.expect(responseBody).to.have.property('balance');\r",
							"    pm.expect(responseBody.balance).to.equal(1000 - 2 * 100 - 3 * 200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/billing/get_balance",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"get_balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "check notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Notifications contain messages 'approved', 'delivery' and 'canceled'\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    pm.expect(Array.isArray(responseBody)).to.be.true; // Check if response is an array\r",
							"\r",
							"    // Check that only one message has status 'approved'\r",
							"    const approvedMessages = responseBody.filter(item => \r",
							"        item.hasOwnProperty('message') && \r",
							"        typeof item.message === 'string' && \r",
							"        item.message.includes('approved')\r",
							"    );\r",
							"\r",
							"    pm.expect(approvedMessages.length).to.equal(1); // Ensure there is exactly one approved message\r",
							"\r",
							"    const deliveryMessages = responseBody.filter(item => \r",
							"        item.hasOwnProperty('message') && \r",
							"        typeof item.message === 'string' && \r",
							"        item.message.includes('delivery')\r",
							"    );\r",
							"\r",
							"    pm.expect(deliveryMessages.length).to.equal(1);\r",
							"\r",
							"    const canceledMessages = responseBody.filter(item => \r",
							"        item.hasOwnProperty('message') && \r",
							"        typeof item.message === 'string' && \r",
							"        item.message.includes('canceled')\r",
							"    );\r",
							"\r",
							"    pm.expect(canceledMessages.length).to.equal(9);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/notifications/get_notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications",
						"get_notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "check stock changes after order ok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains stock changes with 'remove' actions and status 'ok' for order_id = 1\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    // Check if response is an array\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    // Create a map for stock_id to quantity\r",
							"    const stockQuantityMap = {\r",
							"        1: 2,\r",
							"        2: 3\r",
							"    };\r",
							"\r",
							"    // Validate each item in the response\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item).to.have.all.keys('action', 'quantity', 'stock_id', 'id', 'ctime', 'mtime', 'status');\r",
							"        pm.expect(item.action).to.equal('remove');\r",
							"        pm.expect(item.status).to.equal('ok');\r",
							"\r",
							"        // Validate stock_id and quantity against the map\r",
							"        pm.expect(item.quantity).to.equal(stockQuantityMap[item.stock_id]);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/get_stock_changes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"get_stock_changes"
					]
				}
			},
			"response": []
		},
		{
			"name": "check payments after order ok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains successful payment for order_id = 1\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);\r",
							"    \r",
							"    const firstElement = responseData[0];\r",
							"    pm.expect(firstElement).to.have.property('id', 1);\r",
							"    pm.expect(firstElement).to.have.property('amount', 800);\r",
							"    pm.expect(firstElement).to.have.property('status', 'ok');\r",
							"    pm.expect(firstElement).to.have.property('action', 'pay');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/get_payments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"get_payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "check cour reservation after order ok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a list of 1 element and contains data of courier successful reservation for order_id = 1\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);\r",
							"    \r",
							"    const firstElement = responseData[0];\r",
							"    pm.expect(firstElement).to.have.property('id', 1);\r",
							"    pm.expect(firstElement).to.have.property('order_id', 1);\r",
							"    pm.expect(firstElement).to.have.property('action', 'reserve');\r",
							"    pm.expect(firstElement).to.have.property('status', 'ok');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/delivery/get_courier_reservations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"get_courier_reservations"
					]
				}
			},
			"response": []
		},
		{
			"name": "check order status after order ok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a list of 1 element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Order status is 'delivery'\", function () {\r",
							"    const responseData = pm.response.json()[0];\r",
							"    pm.expect(responseData).to.have.property('id', 1);\r",
							"    pm.expect(responseData).to.have.property('status', 'delivery');\r",
							"    pm.expect(responseData).to.have.property('items').that.is.an('array').that.has.lengthOf(2);\r",
							"    pm.expect(responseData.items[0]).to.have.property('id', 1);\r",
							"    pm.expect(responseData.items[0]).to.have.property('quantity', 2);\r",
							"    pm.expect(responseData.items[1]).to.have.property('id', 2);\r",
							"    pm.expect(responseData.items[1]).to.have.property('quantity', 3);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/order/get_orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"order",
						"get_orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "check stock changes after order insufficient funds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Stock changes contain 'remove' and 'add'(rollback) actions for each item with status 'ok' for order_id = 2\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    // Check if response is an array\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    // Define expected objects\r",
							"    const expectedObjects = [\r",
							"        { stock_id: 1, quantity: 4, action: 'remove', status: 'ok' },\r",
							"        { stock_id: 2, quantity: 3, action: 'remove', status: 'ok' },\r",
							"        { stock_id: 1, quantity: 4, action: 'add', status: 'ok' },\r",
							"        { stock_id: 2, quantity: 3, action: 'add', status: 'ok' }\r",
							"    ];\r",
							"\r",
							"    // Validate each expected object is present in the response\r",
							"    expectedObjects.forEach(expected => {\r",
							"        const found = responseData.find(item => \r",
							"            item.stock_id === expected.stock_id &&\r",
							"            item.quantity === expected.quantity &&\r",
							"            item.action === expected.action &&\r",
							"            item.status === expected.status\r",
							"        );\r",
							"        pm.expect(found).to.exist;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/get_stock_changes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"get_stock_changes"
					]
				}
			},
			"response": []
		},
		{
			"name": "check payments after order insufficient funds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains failed payment for order_id = 2\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(1);\r",
							"    \r",
							"    const firstElement = responseData[0];\r",
							"    pm.expect(firstElement).to.have.property('id', 2);\r",
							"    pm.expect(firstElement).to.have.property('amount', 1000);\r",
							"    pm.expect(firstElement).to.have.property('status', 'failed');\r",
							"    pm.expect(firstElement).to.have.property('action', 'pay');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/get_payments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"get_payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "check cour reservation after order insufficient funds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a list of courier reservation is empty for order_id = 2\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/delivery/get_courier_reservations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"get_courier_reservations"
					]
				}
			},
			"response": []
		},
		{
			"name": "check stock changes after order not enough items in stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Stock changes contain 'remove' actions for each item with status 'failed' for order_id = 3\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    // Check if response is an array\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    // Define expected objects\r",
							"    const expectedObjects = [\r",
							"        { stock_id: 1, quantity: 10, action: 'remove', status: 'failed' },\r",
							"        { stock_id: 2, quantity: 3, action: 'remove', status: 'failed' }\r",
							"    ];\r",
							"\r",
							"    // Validate each expected object is present in the response\r",
							"    expectedObjects.forEach(expected => {\r",
							"        const found = responseData.find(item => \r",
							"            item.stock_id === expected.stock_id &&\r",
							"            item.quantity === expected.quantity &&\r",
							"            item.action === expected.action &&\r",
							"            item.status === expected.status\r",
							"        );\r",
							"        pm.expect(found).to.exist;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 3\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/get_stock_changes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"get_stock_changes"
					]
				}
			},
			"response": []
		},
		{
			"name": "check payments after order not enough items in stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains empty list of payments for order_id = 3\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 3\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/get_payments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"get_payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "check cour reservation after order not enough items in stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a list of courier reservation is empty for order_id = 3\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.has.lengthOf(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 3\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/delivery/get_courier_reservations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"get_courier_reservations"
					]
				}
			},
			"response": []
		},
		{
			"name": "check stock changes after order no free couriers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Stock changes contain 'remove' and 'add'(rollback) actions for each item with status 'ok' for order_id = 4\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    // Check if response is an array\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"\r",
							"    // Define expected objects\r",
							"    const expectedObjects = [\r",
							"        { stock_id: 1, quantity: 1, action: 'remove', status: 'ok' },\r",
							"        { stock_id: 1, quantity: 1, action: 'add', status: 'ok' }\r",
							"    ];\r",
							"\r",
							"    // Validate each expected object is present in the response\r",
							"    expectedObjects.forEach(expected => {\r",
							"        const found = responseData.find(item => \r",
							"            item.stock_id === expected.stock_id &&\r",
							"            item.quantity === expected.quantity &&\r",
							"            item.action === expected.action &&\r",
							"            item.status === expected.status\r",
							"        );\r",
							"        pm.expect(found).to.exist;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/get_stock_changes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"get_stock_changes"
					]
				}
			},
			"response": []
		},
		{
			"name": "check payments after order no free couriers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains empty list of payments with actions 'pay' and 'deposit'(rollback) with status 'ok' for order_id = 4\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    const expectedObjects = [\r",
							"        { id: 3, amount: 100, action: 'pay', status: 'ok' },\r",
							"        { id: 4, amount: 100, action: 'deposit', status: 'ok' }\r",
							"    ];\r",
							"\r",
							"    // Validate each expected object is present in the response\r",
							"    expectedObjects.forEach(expected => {\r",
							"        const found = responseData.find(item => \r",
							"            item.id === expected.id &&\r",
							"            item.amount === expected.amount &&\r",
							"            item.action === expected.action &&\r",
							"            item.status === expected.status\r",
							"        );\r",
							"        pm.expect(found).to.exist;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/get_payments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"get_payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "check cour reservation after order no free couriers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains courier reservation with status = 'failed' for order_id = 4\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    const expectedObjects = [\r",
							"        { id: 2, order_id: 4, action: 'reserve', status: 'failed' },\r",
							"    ];\r",
							"\r",
							"    // Validate each expected object is present in the response\r",
							"    expectedObjects.forEach(expected => {\r",
							"        const found = responseData.find(item => \r",
							"            item.id === expected.id &&\r",
							"            item.order_id === expected.order_id &&\r",
							"            item.action === expected.action &&\r",
							"            item.status === expected.status\r",
							"        );\r",
							"        pm.expect(found).to.exist;\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"order_id\": 4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/delivery/get_courier_reservations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"get_courier_reservations"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework",
			"type": "string"
		}
	]
}