{
	"info": {
		"_postman_id": "9b20f7b3-494f-4b49-aca1-8b1cd1687485",
		"name": "idempotency_pre_test_checks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25646654"
	},
	"item": [
		{
			"name": "login as admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains refresh token in cookie and access token in header\", function () {\r",
							"    const refresh_token = pm.response.headers.get(\"Set-Cookie\");\r",
							"    const authHeader = pm.response.headers.get(\"Authorization\"); // Corrected header name\r",
							"\r",
							"    pm.expect(refresh_token).to.exist.and.to.match(/refresh_token=.+/);\r",
							"    pm.expect(authHeader).to.exist.and.to.match(/Bearer .+/); // Added check for undefined\r",
							"\r",
							"    if (authHeader) {\r",
							"        pm.environment.set(\"authorization_admin\", authHeader);\r",
							"    }\r",
							"    if (refresh_token) {\r",
							"        pm.environment.set(\"refresh_token_admin\", refresh_token);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"Qwerty1234!@\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "check initial balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"console.log(\"Response headers: \", pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Initial balance is 0\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    pm.expect(responseBody).to.have.property('balance');\r",
							"    pm.expect(responseBody.balance).to.equal(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/billing/get_balance",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"get_balance"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \", pm.response.json());\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains id\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property('id');\r",
							"    pm.environment.set(\"item1_id\", responseBody.id);\r",
							"    // parse request body, retrieve property price and set in to environment variable \"item1_price\"\r",
							"    const requestBody = pm.request.body.raw;\r",
							"    const parsedRequestBody = JSON.parse(requestBody);\r",
							"    pm.environment.set(\"item1_price\", parsedRequestBody.price);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"apple\",\r\n    \"description\": \"test1\",\r\n    \"price\": 100.00\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/add_item",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"add_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \", pm.response.json());\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains id\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property('id');\r",
							"    pm.environment.set(\"item2_id\", responseBody.id);\r",
							"    // parse request body, retrieve property price and set in to environment variable \"item2_price\"\r",
							"    const requestBody = pm.request.body.raw;\r",
							"    const parsedRequestBody = JSON.parse(requestBody);\r",
							"    pm.environment.set(\"item2_price\", parsedRequestBody.price);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"banana\",\r\n    \"description\": \"test2\",\r\n    \"price\": 200.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/add_item",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"add_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"console.log(\"Response body: \", pm.response.json());\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains id\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property('id');\r",
							"    pm.environment.set(\"item3_id\", responseBody.id);\r",
							"    // parse request body, retrieve property price and set in to environment variable \"item3_price\"\r",
							"    const requestBody = pm.request.body.raw;\r",
							"    const parsedRequestBody = JSON.parse(requestBody);\r",
							"    pm.environment.set(\"item3_price\", parsedRequestBody.price);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"melon\",\r\n    \"description\": \"test3\",\r\n    \"price\": 300.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/add_item",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"add_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item1 to stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"item_id\": 1,\r\n    \"action\": \"add\",\r\n    \"quantity\": 10\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/stock_change",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"stock_change"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item2 to stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"item_id\": 2,\r\n    \"action\": \"add\",\r\n    \"quantity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/stock_change",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"stock_change"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item3 to stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"item_id\": 3,\r\n    \"action\": \"add\",\r\n    \"quantity\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/stock_change",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"stock_change"
					]
				}
			},
			"response": []
		},
		{
			"name": "add courier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Worker1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/delivery/add_courier",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"add_courier"
					]
				}
			},
			"response": []
		},
		{
			"name": "check stock before order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Response body: \" + JSON.stringify(pm.response.json(), null, 2));\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains valid items with expected quantities\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseBody).to.be.an(\"array\").with.lengthOf(3);\r",
							"\r",
							"    const expectedQuantities = {\r",
							"        1: 10,\r",
							"        2: 10,\r",
							"        3: 10\r",
							"    };\r",
							"\r",
							"    // Преобразуем массив ответа в объект по id\r",
							"    const responseMap = responseBody.reduce((acc, item) => {\r",
							"        acc[item.id] = item.quantity;\r",
							"        return acc;\r",
							"    }, {});\r",
							"\r",
							"    // Проверяем все ожидаемые значения\r",
							"    Object.entries(expectedQuantities).forEach(([id, expected]) => {\r",
							"        pm.test(`Item ID ${id} matches expected values`, function () {\r",
							"            pm.expect(responseMap).to.have.property(id);\r",
							"            const item = responseMap[id];\r",
							"            pm.expect(item.name).to.equal(expected.name);\r",
							"            pm.expect(item.price).to.equal(expected.price);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/stock/get_items",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"get_items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add money",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request body: \" + pm.request.body.toString());\r",
							"console.log(\"Response headers: \" + pm.response.headers.toString());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authorization_admin}}",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "{{refresh_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 10000.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/add_money",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"add_money"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "authorization_admin",
			"value": " "
		},
		{
			"key": "refresh_token_admin",
			"value": " "
		}
	]
}