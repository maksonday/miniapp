apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "miniapp.fullname" . }}-cm-users
  namespace: {{ .Release.Namespace }}
data:
  app-config: |
    log-file = "/var/log/users.log"
    log-level = "info"
    listen-port = "8000"
    auth-addr = "http://{{ include "miniapp.fullname" . }}-auth:{{ .Values.service.port }}{{ .Values.auth.path }}"
    base-path = "{{ .Values.users.path }}"

    [db-master]
    host = "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [db-replica]
    host = "{{ .Release.Name }}-postgresql-read.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [redis-replica]
    host = "{{ .Release.Name }}-redis-replicas.{{ .Release.Namespace }}.svc.cluster.local"
    port = 6379

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "miniapp.fullname" . }}-cm-auth
  namespace: {{ .Release.Namespace }}
data:
  app-config: |
    log-file = "/var/log/auth-service.log"
    log-level = "info"
    listen-port = "8000"
    base-path = "{{ .Values.auth.path }}"
    billing-addr = "http://{{ include "miniapp.fullname" . }}-billing:{{ .Values.service.port }}{{ .Values.billing.path }}"

    [db-master]
    host = "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [db-replica]
    host = "{{ .Release.Name }}-postgresql-read.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [redis-master]
    host = "{{ .Release.Name }}-redis-master.{{ .Release.Namespace }}.svc.cluster.local"
    port = 6379

    [redis-replica]
    host = "{{ .Release.Name }}-redis-replicas.{{ .Release.Namespace }}.svc.cluster.local"
    port = 6379

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "miniapp.fullname" . }}-cm-billing
  namespace: {{ .Release.Namespace }}
data:
  app-config: |
    log-file = "/var/log/billing.log"
    log-level = "info"
    listen-port = "8000"
    base-path = "{{ .Values.billing.path }}"
    auth-addr = "http://{{ include "miniapp.fullname" . }}-auth:{{ .Values.service.port }}{{ .Values.auth.path }}"

    [db-master]
    host = "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [db-replica]
    host = "{{ .Release.Name }}-postgresql-read.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [redis-replica]
    host = "{{ .Release.Name }}-redis-replicas.{{ .Release.Namespace }}.svc.cluster.local"
    port = 6379
    
    [db-retry]
    count = 5
    delay = "3s"

    [consumer-config]
    topic = "payments"
    group-id = "payments"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [producer-config]
    topic = "payments_status"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "miniapp.fullname" . }}-cm-stock
  namespace: {{ .Release.Namespace }}
data:
  app-config: |
    log-file = "/var/log/stock.log"
    log-level = "info"
    listen-port = "8000"
    auth-addr = "http://{{ include "miniapp.fullname" . }}-auth:{{ .Values.service.port }}{{ .Values.auth.path }}"
    base-path = "{{ .Values.stock.path }}"

    [db-master]
    host = "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [db-replica]
    host = "{{ .Release.Name }}-postgresql-read.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [redis-replica]
    host = "{{ .Release.Name }}-redis-replicas.{{ .Release.Namespace }}.svc.cluster.local"
    port = 6379

    [db-retry]
    count = 5
    delay = "3s"

    [consumer-config]
    topic = "stock_changes"
    group-id = "stock_changes"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [producer-config]
    topic = "stock_changes_status"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "miniapp.fullname" . }}-cm-order
  namespace: {{ .Release.Namespace }}
data:
  app-config: |
    log-file = "/var/log/order.log"
    log-level = "info"
    listen-port = "8000"
    auth-addr = "http://{{ include "miniapp.fullname" . }}-auth:{{ .Values.service.port }}{{ .Values.auth.path }}"
    base-path = "{{ .Values.order.path }}"
    cour-reserve-retry-count = {{ .Values.delivery.courReserveMaxRetries }}

    [db-master]
    host = "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [db-replica]
    host = "{{ .Release.Name }}-postgresql-read.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [redis-replica]
    host = "{{ .Release.Name }}-redis-replicas.{{ .Release.Namespace }}.svc.cluster.local"
    port = 6379

    [db-retry]
    count = 5
    delay = "3s"

    [payments-consumer-config]
    topic = "payments_status"
    group-id = "payments_status"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [payments-producer-config]
    topic = "payments"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [stock-consumer-config]
    topic = "stock_changes_status"
    group-id = "stock_changes_status"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [stock-producer-config]
    topic = "stock_changes"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [notifications-producer-config]
    topic = "notifications"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [cour-reserve-consumer-config]
    topic = "cour_reserve_status"
    group-id = "cour_reserve_status"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [cour-reserve-producer-config]
    topic = "cour_reserve"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "miniapp.fullname" . }}-cm-notifications
  namespace: {{ .Release.Namespace }}
data:
  app-config: |
    log-file = "/var/log/notifications.log"
    log-level = "info"
    listen-port = "8000"
    auth-addr = "http://{{ include "miniapp.fullname" . }}-auth:{{ .Values.service.port }}{{ .Values.auth.path }}"
    base-path = "{{ .Values.notifications.path }}"

    [db-master]
    host = "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [db-replica]
    host = "{{ .Release.Name }}-postgresql-read.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [redis-replica]
    host = "{{ .Release.Name }}-redis-replicas.{{ .Release.Namespace }}.svc.cluster.local"
    port = 6379

    [consumer-config]
    topic = "notifications"
    group-id = "notifications"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "miniapp.fullname" . }}-cm-delivery
  namespace: {{ .Release.Namespace }}
data:
  app-config: |
    log-file = "/var/log/delivery.log"
    log-level = "info"
    listen-port = "8000"
    auth-addr = "http://{{ include "miniapp.fullname" . }}-auth:{{ .Values.service.port }}{{ .Values.auth.path }}"
    base-path = "{{ .Values.delivery.path }}"

    [db-master]
    host = "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [db-replica]
    host = "{{ .Release.Name }}-postgresql-read.{{ .Release.Namespace }}.svc.cluster.local"
    user = "postgres"
    database = "miniapp"
    sslmode = "disable"
    port = 5432

    [redis-replica]
    host = "{{ .Release.Name }}-redis-replicas.{{ .Release.Namespace }}.svc.cluster.local"
    port = 6379

    [db-retry]
    count = 5
    delay = "3s"

    [cour-reserve-consumer-config]
    topic = "cour_reserve"
    group-id = "cour_reserve"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [cour-reserve-producer-config]
    topic = "cour_reserve_status"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

    [notifications-producer-config]
    topic = "notifications"
    version = "4.0.0"
    brokers = [{{- $rn := .Release.Name -}}
    {{- $ns := .Release.Namespace -}}
    {{- $port := int .Values.kafka.service.ports.client -}}
    {{- printf "\"%s-kafka-controller-headless.%s.svc.cluster.local:%d\"" $rn $ns $port -}}]

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "miniapp.fullname" . }}-courier-schedule-scripts
  namespace: {{ .Release.Namespace }}
data:
  create_schedule.py: |
    #!/usr/bin/env python3
    """
    Скрипт создаёт записи courier_schedule на дату "завтра" 
    для всех курьеров, у которых ещё нет записи.
    Ожидает переменные окружения:
      - DB_HOST
      - DB_PORT (optional, default 5432)
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - DEFAULT_HOUR_MASK (optional, default = '1'*24)
    """
    import os
    import sys
    import time
    from datetime import datetime, timedelta
    from zoneinfo import ZoneInfo
    import psycopg2
    from psycopg2.extras import RealDictCursor

    # Configuration from env
    DB_HOST = os.getenv("DB_HOST", "postgres")
    DB_PORT = int(os.getenv("DB_PORT", "5432"))
    DB_NAME = os.getenv("DB_NAME", "postgres")
    DB_USER = os.getenv("DB_USER", "postgres")
    DB_SSL_MODE = os.getenv("SSL_MODE", "require")
    DB_PASSWORD = os.getenv("DB_PASSWORD", "")
    DEFAULT_HOUR_MASK = os.getenv("DEFAULT_HOUR_MASK", "0" * 24)
    RETRIES = int(os.getenv("DB_RETRIES", "5"))
    RETRY_DELAY_BASE = float(os.getenv("DB_RETRY_DELAY_BASE", "1.0"))

    if len(DEFAULT_HOUR_MASK) != 24 or not set(DEFAULT_HOUR_MASK) <= {"0","1"}:
        print("ERROR: DEFAULT_HOUR_MASK must be 24 characters of '0'/'1'", file=sys.stderr)
        sys.exit(2)
    
    DEFAULT_HOUR_MASK_INT = int(DEFAULT_HOUR_MASK, 2)

    now = datetime.now()
    tomorrow = (now + timedelta(days=1)).date()
    work_date_str = tomorrow.isoformat()  # YYYY-MM-DD

    INSERT_SQL = """
    INSERT INTO courier_schedule (courier_id, work_date, hour_mask)
    SELECT c.id, %s::date, %s::bigint
    FROM couriers c
    LEFT JOIN courier_schedule cs
      ON cs.courier_id = c.id
      AND cs.work_date = %s::date
    WHERE cs.id IS NULL;
    """

    conn = None
    for attempt in range(1, RETRIES + 1):
        try:
            conn = psycopg2.connect(
                host=DB_HOST,
                port=DB_PORT,
                dbname=DB_NAME,
                user=DB_USER,
                password=DB_PASSWORD,
                connect_timeout=10,
                sslmode=DB_SSL_MODE
            )
            conn.autocommit = False
            cur = conn.cursor()
            cur.execute(INSERT_SQL, (work_date_str, DEFAULT_HOUR_MASK, work_date_str))
            inserted = cur.rowcount
            conn.commit()
            print(f"[OK] work_date={work_date_str}, inserted_rows={inserted}")
            cur.close()
            conn.close()
            sys.exit(0)
        except Exception as e:
            # transient DB error? retry with backoff
            print(f"[WARN] attempt {attempt} failed: {e}", file=sys.stderr)
            try:
                if conn:
                    conn.rollback()
                    conn.close()
            except Exception:
                pass
            if attempt < RETRIES:
                delay = RETRY_DELAY_BASE * (2 ** (attempt - 1))
                print(f"Retrying in {delay:.1f}s...", file=sys.stderr)
                time.sleep(delay)
            else:
                print("[ERROR] all attempts failed, exiting non-zero", file=sys.stderr)
                sys.exit(3)