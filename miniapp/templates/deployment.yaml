apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "miniapp.fullname" . }}-users
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "miniapp.labels" . | nindent 4 }}-users
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.rollingUpdate.enabled }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ div .Values.replicaCount 2 }}
      maxUnavailable: {{ div .Values.replicaCount 2 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "miniapp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ include "miniapp.fullname" . }}-users
        {{- include "miniapp.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "miniapp.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: "{{ .Chart.Name }}-users"
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: {{ printf "%s/%s:%s"  .Values.users.image.repository .Values.users.image.name .Values.users.image.tag }}
          imagePullPolicy: {{ .Values.users.image.pullPolicy }}
          ports:
          - containerPort: 8000
          readinessProbe:
            httpGet:
              path: {{ .Values.users.path }}/health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: {{ .Values.users.path }}/health
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 20
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: {{ include "miniapp.fullname" . }}-volume
            mountPath: /usr/local/etc
          - name: {{ .Values.postgresql.auth.existingSecret }}
            mountPath: "/secret/postgres"
            readOnly: true
          - name: {{ .Values.redis.auth.existingSecret }}
            mountPath: "/secret/redis"
            readOnly: true
          - name: {{ .Values.auth.existingSecret }}
            mountPath: /keys
      volumes:
        - name: {{ include "miniapp.fullname" . }}-volume
          configMap:
            name: {{ include "miniapp.fullname" . }}-cm-users
            items:
            - key: app-config
              path: users.conf
        - name: {{ .Values.postgresql.auth.existingSecret }}
          secret:
            secretName: {{ .Values.postgresql.auth.existingSecret }}
            items:
            - key: postgres-password
              path: password
        - name: {{ .Values.auth.existingSecret }}
          secret:
            secretName: {{ .Values.auth.existingSecret }}
            items:
            - key: public-key
              path: cert.pem.pub
        - name: {{ .Values.redis.auth.existingSecret }}
          secret:
            secretName: {{ .Values.redis.auth.existingSecret }}
            items:
            - key: redis-password
              path: password
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "miniapp.fullname" . }}-auth
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "miniapp.labels" . | nindent 4 }}-auth
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.rollingUpdate.enabled }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ div .Values.replicaCount 2 }}
      maxUnavailable: {{ div .Values.replicaCount 2 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "miniapp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ include "miniapp.fullname" . }}-auth
        {{- include "miniapp.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "miniapp.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-auth
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: {{ printf "%s/%s:%s"  .Values.auth.image.repository .Values.auth.image.name .Values.auth.image.tag }}
          imagePullPolicy: {{ .Values.auth.image.pullPolicy }}
          ports:
          - containerPort: 8000
          readinessProbe:
            httpGet:
              path: {{ .Values.auth.path }}/health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: {{ .Values.auth.path }}/health
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 20
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: {{ include "miniapp.fullname" . }}-volume
            mountPath: /usr/local/etc
          - name: {{ .Values.postgresql.auth.existingSecret }}
            mountPath: "/secret/postgres"
            readOnly: true
          - name: {{ .Values.redis.auth.existingSecret }}
            mountPath: "/secret/redis"
            readOnly: true
          - name: {{ .Values.auth.existingSecret }}
            mountPath: /keys
      volumes:
        - name: {{ include "miniapp.fullname" . }}-volume
          configMap:
            name: {{ include "miniapp.fullname" . }}-cm-auth
            items:
            - key: app-config
              path: auth-service.conf
        - name: {{ .Values.postgresql.auth.existingSecret }}
          secret:
            secretName: {{ .Values.postgresql.auth.existingSecret }}
            items:
            - key: postgres-password
              path: password
        - name: {{ .Values.auth.existingSecret }}
          secret:
            secretName: {{ .Values.auth.existingSecret }}
            items:
            - key: private-key
              path: cert.pem
        - name: {{ .Values.redis.auth.existingSecret }}
          secret:
            secretName: {{ .Values.redis.auth.existingSecret }}
            items:
            - key: redis-password
              path: password
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "miniapp.fullname" . }}-billing
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "miniapp.labels" . | nindent 4 }}-billing
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.rollingUpdate.enabled }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ div .Values.replicaCount 2 }}
      maxUnavailable: {{ div .Values.replicaCount 2 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "miniapp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ include "miniapp.fullname" . }}-billing
        {{- include "miniapp.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "miniapp.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-billing
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: {{ printf "%s/%s:%s"  .Values.billing.image.repository .Values.billing.image.name .Values.billing.image.tag }}
          imagePullPolicy: {{ .Values.billing.image.pullPolicy }}
          ports:
          - containerPort: 8000
          readinessProbe:
            httpGet:
              path: {{ .Values.billing.path }}/health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: {{ .Values.billing.path }}/health
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 20
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: {{ include "miniapp.fullname" . }}-volume
            mountPath: /usr/local/etc
          - name: {{ .Values.postgresql.auth.existingSecret }}
            mountPath: "/secret/postgres"
            readOnly: true
          - name: {{ .Values.redis.auth.existingSecret }}
            mountPath: "/secret/redis"
            readOnly: true
          - name: {{ .Values.auth.existingSecret }}
            mountPath: /keys
      volumes:
        - name: {{ include "miniapp.fullname" . }}-volume
          configMap:
            name: {{ include "miniapp.fullname" . }}-cm-billing
            items:
            - key: app-config
              path: billing.conf
        - name: {{ .Values.postgresql.auth.existingSecret }}
          secret:
            secretName: {{ .Values.postgresql.auth.existingSecret }}
            items:
            - key: postgres-password
              path: password
        - name: {{ .Values.auth.existingSecret }}
          secret:
            secretName: {{ .Values.auth.existingSecret }}
            items:
            - key: public-key
              path: cert.pem.pub
        - name: {{ .Values.redis.auth.existingSecret }}
          secret:
            secretName: {{ .Values.redis.auth.existingSecret }}
            items:
            - key: redis-password
              path: password
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "miniapp.fullname" . }}-stock
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "miniapp.labels" . | nindent 4 }}-stock
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.rollingUpdate.enabled }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ div .Values.replicaCount 2 }}
      maxUnavailable: {{ div .Values.replicaCount 2 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "miniapp.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ include "miniapp.fullname" . }}-stock
        {{- include "miniapp.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "miniapp.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: "{{ .Chart.Name }}-stock"
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: {{ printf "%s/%s:%s"  .Values.stock.image.repository .Values.stock.image.name .Values.stock.image.tag }}
          imagePullPolicy: {{ .Values.stock.image.pullPolicy }}
          ports:
          - containerPort: 8000
          readinessProbe:
            httpGet:
              path: {{ .Values.stock.path }}/health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: {{ .Values.stock.path }}/health
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 20
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: {{ include "miniapp.fullname" . }}-volume
            mountPath: /usr/local/etc
          - name: {{ .Values.postgresql.auth.existingSecret }}
            mountPath: "/secret/postgres"
            readOnly: true
          - name: {{ .Values.redis.auth.existingSecret }}
            mountPath: "/secret/redis"
            readOnly: true
          - name: {{ .Values.auth.existingSecret }}
            mountPath: /keys
      volumes:
        - name: {{ include "miniapp.fullname" . }}-volume
          configMap:
            name: {{ include "miniapp.fullname" . }}-cm-stock
            items:
            - key: app-config
              path: stock.conf
        - name: {{ .Values.postgresql.auth.existingSecret }}
          secret:
            secretName: {{ .Values.postgresql.auth.existingSecret }}
            items:
            - key: postgres-password
              path: password
        - name: {{ .Values.auth.existingSecret }}
          secret:
            secretName: {{ .Values.auth.existingSecret }}
            items:
            - key: public-key
              path: cert.pem.pub
        - name: {{ .Values.redis.auth.existingSecret }}
          secret:
            secretName: {{ .Values.redis.auth.existingSecret }}
            items:
            - key: redis-password
              path: password
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
