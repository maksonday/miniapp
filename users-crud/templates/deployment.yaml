apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "users-crud.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "users-crud.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.rollingUpdate.enabled }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ div .Values.replicaCount 2 }}
      maxUnavailable: {{ div .Values.replicaCount 2 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "users-crud.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "users-crud.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "users-crud.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: {{ printf "%s/%s:%s"  .Values.image.repository .Values.image.name (.Values.image.tag | default .Chart.AppVersion) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: 8000
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 20
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: {{ include "users-crud.fullname" . }}-volume
            mountPath: /usr/local/etc
          - name: {{ .Values.postgresql.auth.existingSecret }}
            mountPath: "/secret"
            readOnly: true
      volumes:
        - name: {{ include "users-crud.fullname" . }}-volume
          configMap:
            name: {{ include "users-crud.fullname" . }}-cm
            items:
            - key: app-config
              path: miniapp.conf
        - name: postgres-secret
          secret:
            secretName: {{ .Values.postgresql.auth.existingSecret }}
            items:
            - key: postgres-password
              path: postgres_password
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
